public static float[] decodeChannel(float[] encodedChannel, float startValue, float endValue) {
	float[] decodedChannel = new float[encodedChannel.length+2];
	decodedChannel[0] = startValue;
	decodedChannel[decodedChannel.length-1] = endValue;
	if(decodedChannel.length > 2) {
		LinkedList<Indices> queue = new LinkedList<>();
		queue.add(new Indices(0, decodedChannel.length-1));
		while(!queue.isEmpty()) {
			prediction(queue,decodedChannel,channels[i],channelIndex);
		}
	}
			
	return decodedCannel;
}
			
private static void prediction(LinkedList<Indices> queue,float[] decodedChannel,float[] encodedChanel, int nextIndex) {
	Indices i = queue.pollFirst();
	float start = decodedChannel[i.startIndex];
	float end = decodedChannel[i.endIndex];
	
	int toPredictIndex = (i.endIndex - i.startIndex) / 2 + i.startIndex;
	float predictionError = encodedChanel[nextIndex];
		
	//predict
	float predictionFactor0 = (toPredictIndex-i.startIndex)/(float)(i.endIndex - i.startIndex);
	float predictionFactor1 = (i.endIndex-toPredictIndex)/(float)(i.endIndex - i.startIndex);
	float prediction = (int)(predictionFactor0* start + predictionFactor1*end);
	decodedChannel[toPredictIndex] = prediction-predictionError;
	
	//add next level of indices
	if (i.startIndex + 1 != toPredictIndex){
		Indices next = new Indices(i.startIndex,toPredictIndex);
		queue.addLast(next);
       }
	if (i.endIndex - 1 != toPredictIndex) {
		Indices next = new Indices(toPredictIndex,i.endIndex);
		queue.addLast(next);
	}
}
	
private static class Indices {
	public int startIndex;
	public int endIndex;
		
	public Indices(int start, int end) {
		this.startIndex = start;
		this.endIndex = end;
	}
}